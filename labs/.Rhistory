#testing program
?rbinom
rbinom(1000, 1, 0.9)
rbinom(10, 1, 0.9)
rbinom(10, 1, 0.9)
rbinom(10, 2, 0.9)
rbinom(10, 4, 0.9)
rbinom(10, 7, 0.9)
rbinom(10, 7, 0.9)
#testing program
?rbinom
rbinom(10, 7, 0.9)
n = 1000
rbinom(n, 1, 0.9)
mean(rbinom(n, 1, 0.9))
mean(rbinom(1000, size = 1, prob = 0.9))
rep(1, 10)
rep(c(1, 2, 3), 10)
rep(seq(1, 2, by = 0.1), 10)
x = 1 : 100
sample(x, 3)
sample(x, 101)
sample(x, 3, replace = TRUE)
sample(x, 3, replace = TRUE)
sort(sample(x, 101, replace = TRUE))
sample(x) #default is length of the vector i.e. just shuffles
x = rep(x, 5)
x
class(x)
x = factor(x)
x
?factor
levels = c("low", "medium", "high")
x_char = sample(rep(levels, 10))
x = factor(x_char)
x #nominal categorical variable
x_char = sample(rep(levels, 10))
x = factor(x_char)
x #nominal categorical variable
x = factor(x_char, levels = levels)
x
x = factor(x_char, levels = levels, ordered = TRUE)
x #ordinal categorical variable
kossi = c("none", "infraction", "misdimeanor", "felony")
factor (sample (kossi), 100, replace = TRUE )
x3 = factor(sample(c("none", "infraction", "misdimeanor", "felony"), size = 100, replace = TRUE))
x3
factor (sample (c("none", "infraction", "misdimeanor", "felony")), 100, replace = TRUE )
factor (sample (c("none", "infraction", "misdimeanor", "felony")),size = 100, replace = TRUE )
factor (sample (c("none", "infraction", "misdimeanor", "felony")),size = 100, replace = TRUE )
factor (sample (c("none", "infraction", "misdimeanor", "felony"),size = 100, replace = TRUE )
factor (sample (c("none", "infraction", "misdimeanor", "felony"),size = 100, replace = TRUE )
factor (sample (c("none", "infraction", "misdimeanor", "felony"),size = 100, replace = TRUE ))
(sample(c("none", "infraction", "misdimeanor", "felony"), size = 100, replace = TRUE)
(sample(c("none", "infraction", "misdimeanor", "felony"), size = 100, replace = TRUE)
x3 =  (sample(c("none", "infraction", "misdimeanor", "felony"), size = 100, replace = TRUE)
x3 =sample(c("none", "infraction", "misdimeanor", "felony"), size = 100, replace = TRUE)
x3
factor(c("smoke", "drink"), 10, replace = TRUE)
factor(c("smoke", "drink"), 10)#, replace = TRUE)
factor(c("smoke", "drink"), size = 10, replace = TRUE)
factor(sample("smoke", "drink"), size = 10, replace = TRUE)
factor(sample(c("smoke", "drink"), size = 10, replace = TRUE))
factor( sample (c("none", "infraction", "misdimeanor", "felony")), size = 100, Replace = TRUE)
factor( sample (c("none", "infraction", "misdimeanor", "felony"), size = 100, Replace = TRUE))
factor(sample(c("none", "infraction", "misdimeanor", "felony"), size = 100, replace = TRUE))
factor( sample (c("none", "infraction", "misdimeanor", "felony"), size = 100, Replace = TRUE))
factor( sample (c("none", "infraction", "misdimeanor", "felony"), size = 100, replace = TRUE))
x3
X = matrix(NA, nrow = length(x3), ncol= 3)
X
X[, 1] = as.numeric(x3 == "infraction")
X[, 2] = as.numeric(x3 == "misdimeanor")
x[, 3] = as.numeric(x3 == "felony")
X[, 1] = as.numeric(x3 == "infraction")
X[, 2] = as.numeric(x3 == "misdimeanor")
x[, 3] = as.numeric(x3 == "felony")
X[, 3] = as.numeric(x3 == "felony")
X
colnames(X) = c("infraction", "misdimeanor", "felony")
X
as.numeric(TRUE)
?as.numeric
# rowSums(X)
table(rowSums(X))
rowSums(X)
table(rowSums(X))
colSums(X)
table(colSums(X))
colSums(X)
matrix(NA, nrow = 100, ncol = 6)
fake_first_names = matrix(NA, nrow = 100, ncol = 6)
exactly 24% 1's dispersed randomly. Name the rows the entries of the `fake_first_names` vector.
````
X = matrix(NA, nrow = 100, ncol = 6)
X[, 1] = rnorm(100,)
exactly 24% 1's dispersed randomly
n = 100
X = matrix(NA, nrow = n, ncol = 6)
X[, 1] = rnorm(n, mean = 17, sd = sqrt(38))
X[, 1] = rnorm(n, mean = 17, sd = sqrt(38))
sample ( 2, 3)
sample ( c(2:5), 10, replace = TRUE)
X[, 2] = seq(-10: 10, by= 100)
seq(-10 ,10, by= 100)
seq(-10 ,10, by= 100)
X[, 2] = runif(n,min = -10, mmax = 10)
X[, 2] = runif(n,min = -10, max = 10)
X[, 3] = rpois(n, 6)
X[, 4] = rexp(n, 9)
rbinom(20, 1 , 0.12)
X[, 5] = rep (rbinom(20, 1 , 0.12),5)
rep(rbinom(20, 1 , 0.12),5)
rbinom(100, 20 , 0.12)
?rbinom
X[, 6] = sample(rep(1, 24), rep(0,n-24))
X[, 6] = sample(rep(1, 24), rep(0, 76))
X[, 6] = sample((rep(1, 24), rep(0, 76)), replace = 100)
sample(c( 0,1,2,3,44,5))
X[, 6] = sample(c(rep(1, n*.24), rep(0, n*.76)))
fake_first_names= c( "Sophia", "Emma", "Olivia", "Ava", "Mia", "Isabella", "Riley",
"Aria", "Zoe", "Charlotte", "Lily", "Layla", "Amelia", "Emily",
"Madelyn", "Aubrey", "Adalyn", "Madison", "Chloe", "Harper",
"Abigail", "Aaliyah", "Avery", "Evelyn", "Kaylee", "Ella", "Ellie",
"Scarlett", "Arianna", "Hailey", "Nora", "Addison", "Brooklyn",
"Hannah", "Mila", "Leah", "Elizabeth", "Sarah", "Eliana", "Mackenzie",
"Peyton", "Maria", "Grace", "Adeline", "Elena", "Anna", "Victoria",
"Camilla", "Lillian", "Natalie", "Jackson", "Aiden", "Lucas",
"Liam", "Noah", "Ethan", "Mason", "Caden", "Oliver", "Elijah",
"Grayson", "Jacob", "Michael", "Benjamin", "Carter", "James",
"Jayden", "Logan", "Alexander", "Caleb", "Ryan", "Luke", "Daniel",
"Jack", "William", "Owen", "Gabriel", "Matthew", "Connor", "Jayce",
"Isaac", "Sebastian", "Henry", "Muhammad", "Cameron", "Wyatt",
"Dylan", "Nathan", "Nicholas", "Julian", "Eli", "Levi", "Isaiah",
"Landon", "David", "Christian", "Andrew", "Brayden", "John",
"Lincoln"
)
rownames (X) = fake_first_names
X
X
C = c( "kossi","abba", "afi", "kosiwa", "AWA", "kaka" )
colnames(X) = C
X
#create a data frame
df = data.frame(X)
df
df$kaka = factor(df.kaka, c(0,1), c("DOMESTIC", "FOREIGN"))
df$kaka = factor(df$kaka, c(0,1), c("DOMESTIC", "FOREIGN"))
df
x = c (0, 1)
x
factor ( x, (0,1), (kaka,koko))
factor ( x, (0,1), ("kaka","koko"))
factor ( x , c(0,1), c("kaka","koko"))
factor (X[, 6], c(0,1), c("kaka","koko"))
df
table ( df$kaka)
table ( df$kaka)/n
summary(df)
X = matrix(data = NA, nrow = n, ncol = 6)
X[, 1] = rnorm(n = n, mean = 17, sd = sqrt(38))
X[, 2] = runif(n = n, min = -10, max = 10)
X[, 3] = rpois(n, lambda = 6)
n = 100
X = matrix(data = NA, nrow = n, ncol = 6)
X[, 1] = rnorm(n = n, mean = 17, sd = sqrt(38))
X[, 2] = runif(n = n, min = -10, max = 10)
X[, 3] = rpois(n, lambda = 6)
X[, 4] = rexp(n, rate = 9)
X[, 5] = rbinom(n, size = 20, prob = 0.12)
X[, 6] = sample(c(rep(1, n * .24), rep(0, n * .76)))
fake_first_names = c(
"Sophia", "Emma", "Olivia", "Ava", "Mia", "Isabella", "Riley",
"Aria", "Zoe", "Charlotte", "Lily", "Layla", "Amelia", "Emily",
"Madelyn", "Aubrey", "Adalyn", "Madison", "Chloe", "Harper",
"Abigail", "Aaliyah", "Avery", "Evelyn", "Kaylee", "Ella", "Ellie",
"Scarlett", "Arianna", "Hailey", "Nora", "Addison", "Brooklyn",
"Hannah", "Mila", "Leah", "Elizabeth", "Sarah", "Eliana", "Mackenzie",
"Peyton", "Maria", "Grace", "Adeline", "Elena", "Anna", "Victoria",
"Camilla", "Lillian", "Natalie", "Jackson", "Aiden", "Lucas",
"Liam", "Noah", "Ethan", "Mason", "Caden", "Oliver", "Elijah",
"Grayson", "Jacob", "Michael", "Benjamin", "Carter", "James",
"Jayden", "Logan", "Alexander", "Caleb", "Ryan", "Luke", "Daniel",
"Jack", "William", "Owen", "Gabriel", "Matthew", "Connor", "Jayce",
"Isaac", "Sebastian", "Henry", "Muhammad", "Cameron", "Wyatt",
"Dylan", "Nathan", "Nicholas", "Julian", "Eli", "Levi", "Isaiah",
"Landon", "David", "Christian", "Andrew", "Brayden", "John",
"Lincoln"
)
rownames(X) = fake_first_names
rownames(X) = fake_first_names
X
* Create a data frame of the same data as above except make the binary variable a factor "DOMESTIC" vs "FOREIGN" for 0 and 1 respectively. Print out the top few rows to check if this worked correctly.
df = data.frame(X)
df$X6 = factor(df$X6, levels = c(0, 1), labels = c("DOMESTIC", "FOREIGN"))
df
df = data.frame(X)
df$X6 = factor(df$X6, levels = c(0, 1), labels = c("DOMESTIC", "FOREIGN"))
df
* Print out a table of the binary variable. Then print out the proportions of "DOMESTIC" vs "FOREIGN".
```{r}
table(df$X6)
table(df$X6)/n
table(df$X6)
table(df$X6)/n
```{r}
```{r}
summary(df)
n = 50
matrix(NA, n, n)
max.print(K)
K = matrix(sample(c(rep(0,n^2 .5),rep(1, n^2 .0.25),2, n^2 .0.25)),n,n)
n = 50
K = matrix(sample(c(rep(0,n^2 .5),rep(1, n^2 .0.25),2, n^2 .0.25)),n,n)
K = matrix(sample(c(rep(0,n^2 .5),rep(1, n^2 ..25),(2, n^2 .0.25)),n,n)
K = matrix(sample(c(rep(0,n^2 .5),rep(1, n^2 ..25),rep(2, n^2 .0.25)),n,n)
K = matrix(sample(c(rep(0,n^2 *.5),rep(1, n^2 *.25),rep(2, n^2 *.0.25)),n,n)
K = matrix(sample(c(rep(0,n^2 *.5),rep(1, n^2 *.25),rep(2, n^2 *.0.25))),n,n)
K = matrix(sample(c(rep(0,n^2 *.5),rep(1,n^2*.25),rep(2, n^2 *.25))),n,n)
K
for(i in 1 : n){
for(j in 1 : n) {
if(runif(1) < 0.3) {
X[i, j] = NA
}
}
}
n = 50
X = matrix(sample(c(rep(0, n^2*.5),rep(1, n^2*.25), rep(2,n^2*.25))), nrow = n, ncol = n)
table(X)
n = 50
X = matrix(sample(c(rep(0, n^2*.5),rep(1, n^2*.25), rep(2,n^2*.25))), nrow = n, ncol = n)
table(X)
* Randomly punch holes (i.e. `NA`) values in this matrix so that an each entry is missing with probability 30%.
```{r}
for(i in 1 : n){
for(j in 1 : n) {
if(runif(1) < 0.3) {
X[i, j] = NA
}
}
}
sum(is.na(X)) / n^2
?apply
## keeping named dimnames
names(dimnames(x)) <- c("row", "col")
## Compute row and column sums for a matrix:
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
## Compute row and column sums for a matrix:
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
dimnames(x)[[1]] <- letters[1:8]
apply(x, 2, mean, trim = .2)
col.sums <- apply(x, 2, sum)
row.sums <- apply(x, 1, sum)
rbind(cbind(x, Rtot = row.sums), Ctot = c(col.sums, sum(col.sums))
## Sort the columns of a matrix
apply(x, 2, sort)
## keeping named dimnames
names(dimnames(x)) <- c("row", "col")
x3 <- array(x, dim = c(dim(x),3),
dimnames = c(dimnames(x), list(C = paste0("cop.",1:3))))
identical(x,  apply( x,  2,  identity))
identical(x3, apply(x3, 2:3, identity))
##- function with extra args:
cave <- function(x, c1, c2) c(mean(x[c1]), mean(x[c2]))
apply(x, 1, cave,  c1 = "x1", c2 = c("x1","x2"))
ma <- matrix(c(1:4, 1, 6:8), nrow = 2)
ma
apply(ma, 1, table)  #--> a list of length 2
apply(ma, 1, stats::quantile) # 5 x n matrix with rownames
stopifnot(dim(ma) == dim(apply(ma, 1:2, sum)))
## Example with different lengths for each call
z <- array(1:24, dim = 2:4)
zseq <- apply(z, 1:2, function(x) seq_len(max(x)))
zseq         ## a 2 x 3 matrix
typeof(zseq) ## list
dim(zseq) ## 2 3
zseq[1,]
apply(z, 3, function(x) seq_len(max(x)))
# a list without a dim attribute
# a list without a dim attribute
# a list without a dim attribute
# a list without a dim attribute
# a list without a dim attribute
?std```
?std
?rnorm
```{r}
?split
```
X[order(rowSums(X, na.rm = TRUE), decreasing = TRUE), ]
?apply
